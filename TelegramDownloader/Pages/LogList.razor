@page "/loglist"
@using TelegramDownloader.Services
@inject NavigationManager NavigationManager

<h3>Log List</h3>

<Grid @ref="grid"
      TItem="FileInfo"
      Class="table table-hover table-bordered table-striped"
      DataProvider="DataProvider"
      AllowFiltering="false"
      AllowPaging="true"
      AllowSorting="false"
      Responsive="true">

    <GridColumn TItem="FileInfo" HeaderText="Name" PropertyName="Name" SortString="Name" SortKeySelector="item => item.Name" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
        @context.Name
    </GridColumn>
    <GridColumn TItem="FileInfo" HeaderText="Created" PropertyName="CreationTime" SortString="CreationTime" SortKeySelector="item => item.CreationTime" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
        @context.CreationTime.ToLocalTime().ToLongDateString() @context.CreationTime.ToLocalTime().ToLongTimeString()
    </GridColumn>
    <GridColumn TItem="FileInfo" HeaderText="Updated" PropertyName="LastWriteTime" SortString="LastWriteTime" SortKeySelector="item => item.LastWriteTime" FilterTextboxWidth="80">
        @context.LastWriteTime.ToLocalTime().ToLongDateString() @context.LastWriteTime.ToLocalTime().ToLongTimeString()
    </GridColumn>
    <GridColumn TItem="FileInfo" HeaderText="Size" PropertyName="Length" SortString="Length" SortKeySelector="item => item.Length" FilterTextboxWidth="80">
        @HelperService.SizeSuffix(context.Length)
    </GridColumn>
    <GridColumn TItem="FileInfo" HeaderText="Actions">
        <div class="btn-group btn-group-sm" role="group" aria-label="Small button group">
            <a type="button" class="btn btn-outline-dark" href="@($"/api/log/Download?fileName={context.Name}&show=1")" target="blank"><i class="bi bi-eye"></i></a>
            <button class="btn btn-outline-warning" @onclick="@(e => getFileLog(context))"><i class="bi bi-download"></i></button>
        </div>
    </GridColumn>

</Grid>


@code {

    BlazorBootstrap.Grid<FileInfo> grid = default!;

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task<GridDataProviderResult<FileInfo>> DataProvider(GridDataProviderRequest<FileInfo> request)
    {
        FilesAndCount fac = getLogs(request.PageNumber - 1, request.PageSize);
        return await Task.FromResult(new GridDataProviderResult<FileInfo> { Data = fac.files, TotalCount = fac.totalFiles });//request.ApplyTo(uploads));
    }

    public async Task getFileLog(FileInfo f)
    {
        NavigationManager.NavigateTo($"/api/log/Download?fileName={f.Name}", true);
    }

    private FilesAndCount getLogs(int pageNumber, int pageSize)
    {
        FilesAndCount fac = new FilesAndCount();
        List<string> totalLogs = Directory.GetFiles(Path.Combine(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location), "logs")).ToList();
        totalLogs.Reverse();
        fac.totalFiles = totalLogs.Count();

        if (fac.totalFiles == 0 || fac.totalFiles < (pageNumber) * pageSize)
        {
            fac.files = PathToFileInfoList(totalLogs);
            return fac;
        }
        fac.files = PathToFileInfoList(totalLogs.Skip(pageNumber * pageSize).Take(pageSize).ToList());
        return fac;
    }

    private List<FileInfo> PathToFileInfoList(List<string> pathList)
    {
        List<FileInfo> fileInfoList = new List<FileInfo>();
        foreach(string path in pathList)
        {
            fileInfoList.Add(new FileInfo(path));
        }
        return fileInfoList;
    }

    class FilesAndCount
    {
        public List<FileInfo> files { get; set; }
        public int totalFiles { get; set; }
    }
}
