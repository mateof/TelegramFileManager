@page "/fetchdata/{id}"
@using System.Text.RegularExpressions
@using TelegramDownloader.Data
@using TL
@using TelegramDownloader.Models
@using TelegramDownloader.Services

@inject ITelegramService ts;
@inject NavigationManager NavManager;
@inject PreloadService PreloadService;

<PageTitle>Chat</PageTitle>

@if (m == null)
{
    <p><em>Seleciona un canal</em></p>
}
else
{

    <div>
        @if(m != null)
        {
            <Switch @bind-Value="showAll" @ref="allMessageSwitch" @oninput="ShowAllChanged" Label="Show all messages" />
            @foreach (var mess in m)
            {

                <TelegramDownloader.Pages.Partials.ChatMessage mess="@mess" modal="Modal" />

            }
            @if (!showAll)
            {
                <button type="button" class="btn btn-outline-secondary" @onclick="moreElements"> More elements </button>
            }
            
        }

    </div>
    
    <TelegramDownloader.Pages.Modals.DownloadModal @ref="Modal"></TelegramDownloader.Pages.Modals.DownloadModal>
}

@* <script>
    var toastElList = [].slice.call(document.querySelectorAll('.toast'))
    var toastList = toastElList.map(function (toastEl) {
        return new bootstrap.Toast(toastEl, option)
    })
    for (const t of toastList) {
        t.show();
    }
</script> *@

@code {

    private Modals.DownloadModal Modal { get; set; }
    private string? idChat;
    private int elements = 20;
    private int page = 0;
    bool showAll = false;
    Switch allMessageSwitch { get; set; }
    [Parameter]
    public string? id {
        get => idChat;
        set
        {
            if (idChat != value)
            {
                idChat = value;
                updateId();
            }
        }
    }


    private async Task<string> downloadPhoto(ChatMessages m)
    {
        return await ts.DownloadFile(m, idChat);
    }

    public List<ChatMessages> m = null;


    private async Task ShowAllChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (args.Value != null)
            if ((bool) args.Value)
            {
                if (!String.IsNullOrEmpty(idChat))
                {
                    PreloadService.Show(SpinnerColor.Light, "Loading data...");
                    m = await ts.getAllMessages(long.Parse(idChat));
                    downloadPhotos(m);
                    PreloadService.Hide();
                    StateHasChanged();
                }
            } else 
            {
                await updateId(isRefresh: true);
            }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!ts.checkUserLogin()) NavManager.NavigateTo("/");
    }

    private async Task downloadPhotos(List<ChatMessages> m)
    {
        foreach (ChatMessages mess in m)
        {
            if (mess.message.media is MessageMediaPhoto { photo: Photo photo })
            {
                await downloadPhoto(mess);
            }
        }
    }

    private async Task updateId(bool isRefresh = false)
    {
        if (!isRefresh)
            showAll = false;
        page = 0;
        if (!String.IsNullOrEmpty(idChat))
        {
            m = new List<ChatMessages>();
            await moreElements();
        }
    }

    private async Task moreElements()
    {
        PreloadService.Show(SpinnerColor.Light, "Loading data...");
        if (!String.IsNullOrEmpty(idChat))
        {
            List<ChatMessages> mb = await ts.getChatHistory(long.Parse(idChat), limit: elements, addOffset: elements * page);
            m.AddRange(mb);
            downloadPhotos(page > 0 ? mb : m);
            page += 1;
            StateHasChanged();
        }
        PreloadService.Hide();
    }

    public async Task save(ChatMessages cm)
    {
        await ts.DownloadFile(cm);
    }
}
