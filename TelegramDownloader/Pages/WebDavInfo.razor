@page "/webdavinfo"
@* @model TelegramDownloader.Pages.WebDavInfoModel *@
@using Microsoft.AspNetCore.Components.Forms
@using TelegramDownloader.Data.db
@using TelegramDownloader.Models

@inject IDbService db
@inject ToastService toastService

@if(model != null) {
    <EditForm Model="model" OnValidSubmit="OnSave">
        <div class="card mt-4" style="max-width: 500px; margin:auto;">
            <div class="card-body">
                <h5 class="card-title">WebDAV</h5>
                <div class="card-text">
                    <div class="mb-3">
                        <label class="form-label">Host</label>
                        <InputText class="form-control" @bind-Value="model.webDav.Host" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">TFM port</label>
                        <NumberInput TValue="int" @bind-Value="model.webDav.PuertoEntrada" Min="1" Max="65535" EnableMinMax="true" class="form-control" id="tfmport" placeholder="Telegram File Manager Port" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Output port</label>
                        <NumberInput TValue="int" @bind-Value="model.webDav.PuertoSalida" Min="1" Max="65535" EnableMinMax="true" class="form-control" id="wdport" placeholder="WebDav Port" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </div>
        </div>
    </EditForm>

    <div class="card mt-4" style="max-width: 300px; margin:auto;">
        <div class="card-body text-center">
            <div class="mb-3">
                <span style="display:inline-block; width:40px; height:40px; border-radius:50%; background-color:@GetStatusColor(); border:2px solid #ccc;"></span>
            </div>
            <div class="mb-3">
                <p style="display:inline-block; ">@(status == StatusColor.Rojo ? "Stopped" : "Active") </p>
            </div>
            <div>
                <button class="btn btn-success me-2" @onclick="Start">Start</button>
                <button class="btn btn-warning me-2" @onclick="Stop">Stop</button>
                <button class="btn btn-danger" @onclick="Reset">Reset</button>
            </div>
        </div>
    </div>
}


@code {
    private GeneralConfig model { get; set; }

    private StatusColor status = StatusColor.Rojo;

    protected override async Task OnInitializedAsync() {

        model = null;
        await loadModel();

    }

    private async Task loadModel()
    {
        model ??= await GeneralConfigStatic.Load(db);
        checkStatusColor();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSave()
    {
        await GeneralConfigStatic.SaveChanges(db, model);
        toastService.Notify(new(ToastType.Success, $"The webdav configuration has been saved") { Title = "Success", AutoHide = true });
    }

    private async Task Start()
    {
        model.webDav.start();
        checkStatusColor();
        await InvokeAsync(StateHasChanged);
    }
    private async Task Stop()
    {
        model.webDav.stop();
        checkStatusColor();
        await InvokeAsync(StateHasChanged);
    }
    private async Task Reset()
    {
        model.webDav.stop();
        checkStatusColor();
        await InvokeAsync(StateHasChanged);
        model.webDav.start();
        checkStatusColor();
        await InvokeAsync(StateHasChanged);
    }

    private string GetStatusColor() => status switch
    {
        StatusColor.Verde => "green",
        StatusColor.Amarillo => "yellow",
        StatusColor.Rojo => "red",
        _ => "gray"
    };

    private void checkStatusColor()
    {
        if (model.webDav.webDavService.IsRunning)
        {
            status = StatusColor.Verde;
        } else
        {
            status = StatusColor.Rojo;
        }

    }

    private enum StatusColor
    {
        Verde,
        Amarillo,
        Rojo
    }
}
