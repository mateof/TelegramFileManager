@page "/fm/{id}"

@using TelegramDownloader.Data
@using TelegramDownloader.Data.db
@using TelegramDownloader.Models
@using TelegramDownloader.Pages.Partials
@inject IFileService fs
@inject ITelegramService ts
@inject ILogger<FileManager> Logger
@inject IJSRuntime JSRuntime;
@inject NavigationManager MyNavigationManager;

<style>
    .e-filemanager .e-splitter {
        height: 75vh !important;
    }

    .e-filemanager {
        height: 80vh !important;
    }
</style>

<h3>
    File Manager 
    <Dropdown Color="DropdownColor.Secondary">
        <DropdownToggleButton>@chatName</DropdownToggleButton>
        <DropdownMenu>
            <DropdownItem @onclick="exportData" Type="DropdownItemType.Button"><i class="bi bi-cloud-download"></i> Export</DropdownItem>
            <DropdownItem @onclick="importData" Type="DropdownItemType.Button"><i class="bi bi-cloud-upload"></i> Import</DropdownItem>
        </DropdownMenu>
    </Dropdown>
</h3>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" href="@($"/fm/{id}")">Remote</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@($"/localfm/{id}")">Local</a>
    </li>
</ul>

<TelegramDownloader.Pages.Partials.impl.FileManagerImpl id="@id"></TelegramDownloader.Pages.Partials.impl.FileManagerImpl>
<TelegramDownloader.Pages.Modals.ImportDataModal id="@id" @ref="ImportModal"></TelegramDownloader.Pages.Modals.ImportDataModal>

@code {
    private Modals.ImportDataModal ImportModal { get; set; }
    [Parameter]
    public string id { get; set; }

    BsonSharedInfoModel bsi { get; set; }
    public string chatName { get; set; }

    NotificationModel nm = new NotificationModel();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            chatName = ts.getChatName(Convert.ToInt64(id));
        } catch(Exception ex)
        {
            Logger.LogError(ex, "Error on GetSharedInfoById");
            nm.sendMessage("Error", "Error on GetSharedInfoById", NotificationTypes.Error);
        }     
    }

    public void exportData()
    {
        MyNavigationManager.NavigateTo("/api/file/export/" + id, true);
    }
    public async Task importData()
    {
        await ImportModal.Open();
    }

    
}
