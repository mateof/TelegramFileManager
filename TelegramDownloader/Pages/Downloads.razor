@page "/downloads"

@using TelegramDownloader.Data
@using TelegramDownloader.Models
@using TelegramDownloader.Services

@inject TransactionInfoService tis

<Tabs>
    <Tab Title="Pending Tasks" IsActive="true">
        <Content>
            <button class="btn btn-success" @onclick="clearTasks" data-bs-toggle="tooltip" data-bs-placement="top" title="Clear completed and error"><i class="bi bi-trash"></i> Clear</button>
            <TelegramDownloader.Pages.Partials.TasksTable></TelegramDownloader.Pages.Partials.TasksTable>
        </Content>
    </Tab>
    <Tab Title="Downloads">
        <Content>
            <button class="btn btn-success" @onclick="clearDownloads" data-bs-toggle="tooltip" data-bs-placement="top" title="Clear completed and error"><i class="bi bi-trash"></i> Clear</button>
            <TelegramDownloader.Pages.Partials.DownloadsTable></TelegramDownloader.Pages.Partials.DownloadsTable>
        </Content>
    </Tab>
    <Tab Title="Uploads">
        <Content>
            <button class="btn btn-success" @onclick="clearUploads" data-bs-toggle="tooltip" data-bs-placement="top" title="Clear completed and error"><i class="bi bi-trash"></i> Clear</button>
            <TelegramDownloader.Pages.Partials.UploadsTable></TelegramDownloader.Pages.Partials.UploadsTable>
        </Content>
    </Tab>
</Tabs>


@code {
    public static List<DownloadModel> ldm = new List<DownloadModel>();
    public static List<UploadModel> lum = new List<UploadModel>();
    public static List<InfoDownloadTaksModel> lpt = new List<InfoDownloadTaksModel>();
    BlazorBootstrap.Grid<UploadModel> grid = default!;

    protected override async Task OnInitializedAsync()
    {
    }

    
    void clearUploads()
    {
        TransactionInfoService.clearUploadCompleted();
    }

    void clearDownloads()
    {
        TransactionInfoService.clearDownloadCompleted();
    }

    void clearTasks()
    {
        TransactionInfoService.clearTasksCompleted();
    }

    
    
}
