@page "/localfm/{id}"
@using TelegramDownloader.Data
@using TelegramDownloader.Models
@using TelegramDownloader.Pages.Modals
@inject HttpClient httpClient;
@inject IJSRuntime JSRuntime;
@inject NavigationManager MyNavigationManager;
@inject IFileService fs;
@inject ITelegramService ts;
@inject ILogger<FileManager> Logger;


<style>
    .e-filemanager .e-splitter {
        height: 75vh !important;
    }

    .e-filemanager {
        height: 80vh !important;
    }
</style>

<h3>File Manager <span class="badge bg-secondary">@chatName</span></h3>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" aria-current="page" href="@($"/fm/{id}")">Remote</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" href="@($"/localfm/{id}")">Local</a>
    </li>
</ul>
<SfFileManager ID="localfm" TValue="FileManagerDirectoryContent">
    <FileManagerAjaxSettings Url=@($"/api/file/FileOperations")
                             UploadUrl="/api/file/Upload"
                             DownloadUrl="/api/file/Download"
                             GetImageUrl="/api/file/GetImage">
    </FileManagerAjaxSettings>
    <FileManagerEvents TValue="FileManagerDirectoryContent" OnFileOpen="fileOpen" ToolbarItemClicked="toolBarClicked"></FileManagerEvents>
    <FileManagerUploadSettings MaxFileSize="@(long.MaxValue)" AutoUpload="true"></FileManagerUploadSettings>
    <FileManagerToolbarSettings ToolbarItems="@Items"></FileManagerToolbarSettings>
    <FileManagerContextMenuSettings File="@ContextItems"></FileManagerContextMenuSettings>
    <FileManagerEvents TValue="FileManagerDirectoryContent" ToolbarItemClicked="toolBarClicked" OnFileOpen="fileOpen" MenuOpened="MenuOpened" OnMenuClick="OnMenuClick"></FileManagerEvents>

</SfFileManager>

<TelegramDownloader.Pages.Modals.UploadToTelegramModal @ref="Modal"></TelegramDownloader.Pages.Modals.UploadToTelegramModal>
<TelegramDownloader.Pages.Modals.FileUploadModal @ref="ModalUpSer"></TelegramDownloader.Pages.Modals.FileUploadModal>


@code {
    [Parameter]
    public string id { get; set; }

    private string chatName { get; set; }
    public static string[] selectedItems = new string[] { "" };

    NotificationModel nm = new NotificationModel();
    public string[] ContextItems = new string[] { "Open", "Delete", "Download", "Rename", "Details", "Copy Media Url" };

    private Modals.UploadToTelegramModal Modal { get; set; }
    private Modals.FileUploadModal ModalUpSer { get; set; }
    

    public List<ToolBarItemModel> Items = new List<ToolBarItemModel>(){
        new ToolBarItemModel() { Name = "NewFolder" },
        new ToolBarItemModel() { Name = "Cut" },
        new ToolBarItemModel() { Name = "Copy" },
        new ToolBarItemModel() { Name = "Paste" },
        new ToolBarItemModel() { Name = "Delete" },
        new ToolBarItemModel() { Name = "Download" },
        // new ToolBarItemModel() { Name = "Upload" },
        new ToolBarItemModel() { Name = "Rename" },
        new ToolBarItemModel() { Name = "SortBy" },
        new ToolBarItemModel() { Name = "Refresh" },
        new ToolBarItemModel() { Name = "Upload File",  Text="Upload To Server", TooltipText="Upload To server", PrefixIcon="e-icons e-fe-upload" },
        new ToolBarItemModel() { Name = "UploadTelegram", Text="Upload Telegram", TooltipText="Upload File", PrefixIcon="bi bi-telegram" },
        new ToolBarItemModel() { Name = "Selection" },
        new ToolBarItemModel() { Name = "View" },
        new ToolBarItemModel() { Name = "Details" },
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await fs.CreateDatabase(id);
            chatName = ts.getChatName(Convert.ToInt64(id));
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error on CreateDatabase");
            nm.sendMessage("Error", "Error on CreateDatabase", NotificationTypes.Error);
        }

    }

    public async Task fileOpen(FileOpenEventArgs<FileManagerDirectoryContent> args)
    {
        if (args != null && args.FileDetails != null && args.FileDetails.IsFile && new List<string> { ".mp3", ".ogg", ".flac", ".aac", ".wav" }.Contains(args.FileDetails.Type.ToLower()))
        {
            await playAudio(args);
            // string localdir = "/" + FileService.STATICRELATIVELOCALDIR.Replace("\\", "/");
            // string path = Path.Combine(localdir, args.FileDetails.FilterPath.Substring(1).Replace("\\", "/"), args.FileDetails.Name);
            // await JSRuntime.InvokeVoidAsync("open", path, "_blank");
        }
    }

    private async Task playAudio(FileOpenEventArgs<FileManagerDirectoryContent> args)
    {
        string localdir = MyNavigationManager.BaseUri + FileService.STATICRELATIVELOCALDIR.Replace("\\", "/");
        string path = new System.Uri((Path.Combine(localdir, args.FileDetails.FilterPath.Substring(1).Replace("\\", "/"), args.FileDetails.Name)).Replace("\\", "/")).AbsoluteUri;
        await JSRuntime.InvokeVoidAsync("openAudioPlayerModal", path);
    }

    public void MenuOpened(MenuOpenEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.FileDetails.Count() == 1)
        {

        }
        // for (int i = 0; i < args.FileDetails.Count(); i++)
        // {
        //     if (!args.FileDetails[i].IsFile)
        //     {
        //         for (int j = 0; j < args.Items.Count(); j++)
        //         {
        //             if (args.Items[j].Text == "Cut")
        //             {
        //                 args.Items[j].Disabled = true;
        //             }
        //         }
        //     }
        //     else
        //     {
        //         for (int j = 0; j < args.Items.Count(); j++)
        //         {
        //             if (args.Items[j].Disabled == true)
        //             {
        //                 args.Items[j].Disabled = false;
        //             }
        //         }
        //     }
        // }

    }

    public async Task OnMenuClick(MenuClickEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.FileDetails.Count() == 1)
        {
            if (args.Item.Text == "Copy Media Url")
            {
                
                string localdir = MyNavigationManager.BaseUri + FileService.STATICRELATIVELOCALDIR.Replace("\\", "/");
                string path = new System.Uri((Path.Combine(localdir, args.FileDetails[0].FilterPath.Substring(1).Replace("\\", "/"), args.FileDetails[0].Name)).Replace("\\", "/")).AbsoluteUri;
                await JSRuntime.InvokeVoidAsync("copyToClipboard", path);
                nm.sendMessage("Copy to Clipboard", "Copied", force: true);
            }

        }
    }

    public async Task toolBarClicked(ToolbarClickEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.Item.Text == "Upload Telegram" && args.FileDetails.Count() > 0)
        {
            Modal.id = id;
            Modal.fileList = args.FileDetails;
            Modal.filePath = args.FileDetails.FirstOrDefault().IsFile ? args.FileDetails.FirstOrDefault().FilterPath.Replace("\\", "/") + args.FileDetails.FirstOrDefault().Name : args.FileDetails.FirstOrDefault().FilterPath.Replace("\\", "/") + args.FileDetails.FirstOrDefault().Name + "/";
            Modal.Open();
        }

        if (args.Item.Text == "Upload To Server" && args.FileDetails.Count() > 0)
        {
            ModalUpSer.id = id;
            ModalUpSer.url = "/api/file/Upload";
            ModalUpSer.filePath = args.FileDetails.FirstOrDefault().IsFile ? args.FileDetails.FirstOrDefault().FilterPath.Replace("\\", "/") + args.FileDetails.FirstOrDefault().Name : args.FileDetails.FirstOrDefault().FilterPath.Replace("\\", "/") + args.FileDetails.FirstOrDefault().Name + "/";
            ModalUpSer.Open();
        }
    }
}
