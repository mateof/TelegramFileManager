@using TL
@using TelegramDownloader.Data
@using TelegramDownloader.Data.db
@using TelegramDownloader.Models
@using TelegramDownloader.Services
@using TelegramDownloader.Shared

@inject IFileService fs
@inject ITelegramService ts

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Folder</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="() => Close()" aria-label="Close" style="border-color: transparent;background-color: transparent;">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (ShowBackdrop)
                {
                    <EditForm class="form-signin mb-4" Model="model" OnSubmit="Submit" FormName="downloadModelForm">
                        <div>
                            <TelegramDownloader.Shared.Ddtree idTree="tltree" id="@id" folderType="local" @ref="ddtree"></TelegramDownloader.Shared.Ddtree>
                        </div>
                    </EditForm>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="() => Submit()">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    public NewDownloadModel? model { get; set; }
    public Ddtree ddtree { get; set; }
    [Parameter]
    public string id { get; set; }
    [Parameter]
    public bool isShare { get; set; } = false;
    [Parameter]
    public BsonSharedInfoModel bsi { get; set; }
    public string filePath { get; set; }

    public List<FileManagerDirectoryContent> fileList { get; set; }
    public List<ChatMessages> chatMessages { get; set; }
    public bool isDownloadingChatMessages { get; set; } = false;

    public string filename = "";
    public string size = "";
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;


    protected override async Task OnInitializedAsync()
    {

        model ??= new();

    }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private async Task Submit()
    {
        if (isDownloadingChatMessages)
        {
            chatMessages.ForEach(message => fs.DownloadFileFromChat(message, null, ddtree.selectedNode == null ? null : ddtree.selectedNode.FirstOrDefault(), null));
            Close();
            return;
        }
        // ts.
        if (isShare)
            fs.downloadFile(DbService.SHARED_DB_NAME, fileList.ToList(), ddtree.selectedNode == null ? null : ddtree.selectedNode.FirstOrDefault(), bsi.CollectionId, bsi.ChannelId);
        else
            fs.downloadFile(id, fileList.ToList(), ddtree.selectedNode == null ? null : ddtree.selectedNode.FirstOrDefault());
        Close();

    }
}