@inherits LayoutComponentBase
@using TelegramDownloader.Data
@using TelegramDownloader.Models
@using TelegramDownloader.Models.GitHub
@using TelegramDownloader.Services.GitHub
@using TelegramDownloader.Shared
@inject ITelegramService ts
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ModalService ModalService
@inject GHService ghService;

<PageTitle>TelegramFileManager</PageTitle>

<style>
    .modalshow {
        display: block
    }

    .modalhide {
        display: none
    }
</style>

<Preload LoadingText="Loading..." />


<div class="page">
    <div class="sidebar">
        <NavMenu OnClickCallback="openOffCanvasMenu" OnClickOpenImportCallback="openImportModalMenu" />
    </div>

    <main>
        <div class="top-row px-4">
            <Button Color="ButtonColor.None" Size="ButtonSize.Small" @onclick="() => ShowModalVersion(ModalType.Info)">
                <Icon Name="IconName.InfoCircleFill" Size="IconSize.x2" Color="IconColor.Info" />
            </Button>
            <button class="btn" type="button" @onclick="openOffCanvasMenu"><i class="bi bi-three-dots"></i></button>
        </div>
        <TelegramDownloader.Pages.Modals.ToastNotify></TelegramDownloader.Pages.Modals.ToastNotify>
        
        <article class="content px-4">
            <div id="modalFileUploadVue">
                <TelegramDownloader.Pages.Modals.FileUploadModalTemplate></TelegramDownloader.Pages.Modals.FileUploadModalTemplate>
                <TelegramDownloader.Pages.Modals.AudioPlayerModal></TelegramDownloader.Pages.Modals.AudioPlayerModal>
            </div>
            @Body
        </article>

        <Offcanvas @ref="offcanvas"
                   title="Menu">
            <BodyTemplate>
                <div class="list-group list-group-flush">
                    <button @onclick=' () => Navigateto("/config")' class="list-group-item list-group-item-action"><i class="bi bi-gear"></i> Configuration</button>
                    <button @onclick=' () => Navigateto("/downloads")' class="list-group-item list-group-item-action"><i class="bi bi-cloud-download"></i> Tasks</button>
                    <button @onclick=' () => Navigateto("/loglist")' class="list-group-item list-group-item-action"><i class="bi bi-file-earmark-text"></i> Logs</button>
                    <a href="#" @onclick=" () => Logout()" class="list-group-item list-group-item-action list-group-item-warning"><i class="bi bi-box-arrow-right"></i> LogOut</a>
                </div>
            </BodyTemplate>
        </Offcanvas>
        <TelegramDownloader.Pages.Modals.ImportDataModal isShared=true @ref="ImportModal"></TelegramDownloader.Pages.Modals.ImportDataModal>
        
        <Modal IsServiceModal="true" />
        <Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
    </main>
</div>


@code {

    private Offcanvas offcanvas = default!;
    private Pages.Modals.ImportDataModal ImportModal { get; set; }
    private GithubVersionModel LastVersion { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (!ts.checkUserLogin()) NavManager.NavigateTo("/", true);
                LastVersion = await ghService.GetLastVersion();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

        }

    }


    private async Task ShowModalVersion(ModalType modalType)
    {
        var modalOption = new ModalOption
            {
                Title = "Versión",
                Message = GetType().Assembly.GetName().Version.ToString() == "0.0.0.0" ? "You have a docker version" : $@"Your versión is v{GetType().Assembly.GetName().Version.ToString()}
[[Last version is {(LastVersion != null ? LastVersion.tag_name : "")}]]",
                Type = modalType,
            };

        await ModalService.ShowAsync(modalOption);
    }

    private async Task openOffCanvasMenu()
    {
        await offcanvas.ShowAsync(); 
    }

    private async Task openImportModalMenu()
    {
        await ImportModal.Open();
    }

    private async Task openImportMenu()
    {
        await offcanvas.ShowAsync();
    }


    private void Notificar()
    {
        NotificationModel nm = new NotificationModel();
        nm.sendEvent(new Notification("<h1>Body message</h1>", "Title", NotificationTypes.Info));
    }

    private async Task Navigateto(string relativeUri)
    {
        await offcanvas.HideAsync();
        NavManager.NavigateTo(relativeUri);
    }


    private async void Logout()
    {
        await ts.logOff();
        NavManager.NavigateTo("/");
        StateHasChanged();
    }
}
