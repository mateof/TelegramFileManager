@using System.Collections.ObjectModel
@using TelegramDownloader.Data
@using TelegramDownloader.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Navigations

@inject IFileService fs


    <div class="form-floating mb-3">
    @if (localFolderTypes.Contains(folderType))
    {
        <SfDropDownTree class="form-control" id="@idTree" type="text" aria-label="Folder" AllowFiltering="true" LoadOnDemand="true" TValue="string" TItem="FolderModel" Placeholder="Select a Folder" @bind-Value="@selectedNode">
            <DropDownTreeField TItem="FolderModel" ID="Id" Text="FolderName" Child="Folders" DataSource="@LocalFolders" Expanded="Expanded"></DropDownTreeField>
        </SfDropDownTree>
        
    } else
    {
        <SfDropDownTree class="form-control" TItem="BsonFileManagerModel" id="@idTree" type="text" aria-label="Folder" AllowFiltering="false" LoadOnDemand="true" TValue="string" Placeholder="Select a Folder" @bind-Value="@selectedNode">
            <DropDownTreeField TItem="BsonFileManagerModel" ID="Id" Text="Name" ParentID="ParentId" DataSource="@MyFolder" HasChildren="HasChild"></DropDownTreeField>
        </SfDropDownTree>
    }
    
        <label for="mtree">Folder</label>
    </div>


@code {

    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    [Parameter]
    public string id { get; set; }
    [Parameter]
    public string idTree { get; set; } = "mtree";
    [Parameter]
    public List<string> selectedNode { get; set; }
    [Parameter]
    public string folderType { get; set; } = "local";

    private List<string> localFolderTypes = new List<string> {"local", "temp"};
    private List<BsonFileManagerModel> MyFolder { get; set; }
    private List<FolderModel> LocalFolders { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        PreloadService.Show(SpinnerColor.Light, "Loading data...");
        await getFolders();
        PreloadService.Hide();
    }

    void ValueChanged(DdtChangeEventArgs<string> args)
    {
        // EmployeeData currentData = Data?.Find((item) => item.Id == args.NodeData.Id);
        // Name = currentData?.Name;
        // Role = currentData?.Job;
        // this.Visibility = true;
    }


    public async Task getFolders()
    {
        // if (MyFolder != null) return MyFolder;

        if (localFolderTypes.Contains(folderType))
            LocalFolders = new List<FolderModel>(FileService.getFolderNodes(FileService.TEMPDIR).ToList());
        if (folderType == "telegram")
            if (MyFolder != null)
            {
                MyFolder.Clear();
                MyFolder.AddRange((await fs.getTelegramFolders(id)).ToList());
            }else
            {
                MyFolder = new List<BsonFileManagerModel>((await fs.getTelegramFolders(id)).ToList());
            }

        await Task.Delay(1000);

        
    }
}
