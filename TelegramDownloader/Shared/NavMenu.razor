@using TelegramDownloader.Data
@using TL
@using TelegramDownloader.Data.db
@using TelegramDownloader.Models
@inject NavigationManager uriHelper;
@inject IDbService db;
@inject ITelegramService ts
@inject IJSRuntime JS

<style>
    .ellipsis {
        text-overflow: ellipsis;
    }

    .navclass {
        color: white
    }

    .groupbtnactionclass {
        color: antiquewhite;
        --bs-btn-border-color: #0d6efd00;
        --bs-btn-hover-bg: #00f2ff4a;
        --bs-btn-active-bg: #7b9ccd75;
    }

    .groupbtnclass {
        width: 90%;
        padding-left: 10%;
        padding-bottom: 5%;
    }
</style>

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/fetchdata"><img src="/favicon.ico" style="height: 2em;" /> TelegramFileManager</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass">
    <nav class="flex-column menu">
        @if (showSearch)
        {
            <div class="nav-item px-3">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="searchChatLabel"><i class="bi bi-search"></i></span>
                    <input type="text" id="searchChats" class="form-control navbar-collapse" @onchange="searchChat" placeholder="Search" aria-label="Search" aria-describedby="Search">
                </div>
            </div>
        }
        <div class="">
            <div class="btn-group btn-group-sm groupbtnclass" role="group" aria-label="Small button group">
                <button type="button" class="btn btn-outline-primary groupbtnactionclass" @onclick="ToggleSearch"><i class="bi bi-search"></i></button>
                <button type="button" class="btn btn-outline-primary groupbtnactionclass" title="Refresh channels" @onclick="RefreshChannels"><i class="bi bi-arrow-clockwise"></i></button>
                <button type="button" class="btn btn-outline-primary groupbtnactionclass" @onclick="showPlayer"><i class="bi bi-boombox"></i></button>
                <button class="btn groupbtnactionclass" type="button" @onclick="HandleThreeDots"><i class="bi bi-three-dots"></i></button>
            </div>
            <nav>
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    <button class="nav-link navclass active" id="nav-mine-tab" data-bs-toggle="tab" data-bs-target="#nav-mine" type="button" role="tab" aria-controls="nav-mine" aria-selected="true"><i class="bi bi-chat-square-heart"></i> Mine</button>
                    <button class="nav-link navclass" id="nav-fav-tab" data-bs-toggle="tab" data-bs-target="#nav-fav" type="button" role="tab" aria-controls="nav-fav" aria-selected="false"><i class="bi bi-bookmark-star"></i> Fav</button>
                    <button class="nav-link navclass" id="nav-sha-tab" data-bs-toggle="tab" data-bs-target="#nav-sha" type="button" role="tab" aria-controls="nav-sha" aria-selected="false"><i class="bi bi-share"></i> Shared</button>
                    <button class="nav-link navclass" id="nav-all-tab" data-bs-toggle="tab" data-bs-target="#nav-all" type="button" role="tab" aria-controls="nav-all" aria-selected="false"><i class="bi bi-chat-square-text"></i> All</button>
                </div>
            </nav>
        </div>

        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-mine" role="tabpanel" aria-labelledby="nav-mine-tab">
                @foreach (ChatViewBase cb in mineChats)
                {
                    <div class="row">
                        <div class="col-1" style="align-content: space-around; padding-left: 5%; ">
                            @if (isInFavourite(cb.chat.ID))
                            {
                                <span style="color:white; cursor: pointer;" class="bi bi-star-fill" @onclick="async () => await removeStar(cb.chat.ID)"></span>
                            }
                            else
                            {
                                <span style="color:white; cursor: pointer;" class="bi bi-star" @onclick="async () => await setStar(cb.chat.ID)"></span>
                            }
                        </div>
                        <div class="col-9">

                            <div class="nav-item" style="padding:inherit;" @onclick="ToggleNavMenu">
                                <NavLink class="nav-link ellipsis" href="@($"/fetchdata/{cb.chat.ID}")" Match="NavLinkMatch.All">
                                    <span aria-hidden="true">


                                    </span>
                                    <span class="text-truncate">@cb.chat.Title</span>
                                </NavLink>

                            </div>
                        </div>
                        <div class="col-2" style="position: relative; padding-top: 2%; padding-left: 0;">
                            <button class="btn" type="button" style="padding:0" data-bs-toggle="dropdown" aria-expanded="false" @onclick="@(async () => await goTo($"/fm/{cb.chat.ID}"))">
                                <span style="color:white" class="bi bi-folder"></span>
                            </button>
                        </div>
                    </div>
                }
            </div>
            <div class="tab-pane fade" id="nav-sha" role="tabpanel" aria-labelledby="nav-sha-tab">
                <div class="row">
                    <div class="btn-group" role="group" aria-label="Basic outlined example">
                        <button class="btn btn-outline-warning" type="button" @onclick="HandleImportMenu"><i class="bi bi-cloud-upload"></i> Import</button>
                        <button type="button" class="btn btn-outline-info"><i class="bi bi-grid-3x3-gap-fill"></i> List</button>
                    </div>
                </div>
                @foreach (BsonSharedInfoModel sc in sharedChats)
                {
                    <div class="row">
                        <div class="col-1" style="align-content: space-around; padding-left: 5%; ">
                            <span style="color:white; cursor: pointer;" class="bi bi-star-fill" ></span>
                        </div>
                        <div class="col-9">

                            <div class="nav-item" style="padding:inherit;" @onclick="ToggleNavMenu">
                                <NavLink class="nav-link ellipsis" href="@($"/shared/{sc.Id}")" Match="NavLinkMatch.All">
                                    <span aria-hidden="true">


                                    </span>
                                    <span class="text-truncate">@sc.Name</span>
                                </NavLink>

                            </div>
                        </div>
                        <div class="col-2" style="position: relative; padding-top: 2%; padding-left: 0;">
                            <button class="btn" type="button" style="padding:0" data-bs-toggle="dropdown" aria-expanded="false" @onclick="@(async () => await goTo($"/shared/{sc.Id}"))">
                                <span style="color:white" class="bi bi-folder"></span>
                            </button>
                        </div>
                    </div>
                }
            </div>
            <div class="tab-pane fade" id="nav-fav" role="tabpanel" aria-labelledby="nav-fav-tab">
                @foreach (ChatViewBase cb in favouriteChats)
                {
                    <div class="row">
                        <div class="col-1" style="align-content: space-around; padding-left: 5%; ">
                            <span style="color:white; cursor: pointer;" class="bi bi-star-fill" @onclick="async () => await removeStar(cb.chat.ID)"></span>
                        </div>
                        <div class="col-9">

                            <div class="nav-item" style="padding:inherit;" @onclick="ToggleNavMenu">
                                <NavLink class="nav-link ellipsis" href="@($"/fetchdata/{cb.chat.ID}")" Match="NavLinkMatch.All">
                                    <span aria-hidden="true">


                                    </span>
                                    <span class="text-truncate">@cb.chat.Title</span>
                                </NavLink>

                            </div>
                        </div>
                        <div class="col-2" style="position: relative; padding-top: 2%; padding-left: 0;">
                            <button class="btn" type="button" style="padding:0" data-bs-toggle="dropdown" aria-expanded="false" @onclick="@(async () => await goTo($"/fm/{cb.chat.ID}"))">
                                <span style="color:white" class="bi bi-folder"></span>
                            </button>
                        </div>
                    </div>
                }
            </div>
            <div class="tab-pane fade" id="nav-all" role="tabpanel" aria-labelledby="nav-all-tab">
                @foreach (ChatViewBase cb in sChats)
                {
                    <div class="row">
                        <div class="col-1" style="align-content: space-around; padding-left: 5%; ">
                            @if(isInFavourite(cb.chat.ID)) 
                            {
                                <span style="color:white; cursor: pointer;" class="bi bi-star-fill" @onclick="async () => await removeStar(cb.chat.ID)"></span>
                            } else
                            {
                                <span style="color:white; cursor: pointer;" class="bi bi-star" @onclick="async () => await setStar(cb.chat.ID)"></span>
                            }
                            
                        </div>
                        <div class="col-9">
                            <div class="nav-item" style="padding:inherit;" @onclick="ToggleNavMenu">
                                <NavLink class="nav-link ellipsis" href="@($"/fetchdata/{cb.chat.ID}")" Match="NavLinkMatch.All">
                                    <span aria-hidden="true">
                                        @*  @if (cb.chat.Photo != null)
                                    {
                                    <img src="data:image/jpg;base64, @cb.img64" alt="photo" style="width:1vw;" />
                                    } *@

                                    </span>
                                    <span class="text-truncate">@cb.chat.Title</span>
                                </NavLink>

                            </div>
                        </div>
                        <div class="col-2" style="position: relative; padding-top: 2%; padding-left: 0;">

                            <button class="btn" type="button" style="padding:0" data-bs-toggle="dropdown" aria-expanded="false" @onclick="@(async () => await goTo($"/fm/{cb.chat.ID}"))">
                                <span style="color:white" class="bi bi-folder"></span>
                            </button>

                        </div>
                    </div>
                }
            </div>
        </div>


    </nav>
    
</div>



@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    [Parameter] public EventCallback OnClickCallback { get; set; }
    [Parameter] public EventCallback OnClickOpenImportCallback { get; set; }


    private List<ChatViewBase> sChats = new List<ChatViewBase>();
    private List<ChatViewBase> allChats = new List<ChatViewBase>();
    private List<ChatViewBase> mineChats = new List<ChatViewBase>();
    private List<BsonSharedInfoModel> sharedChats = new List<BsonSharedInfoModel>();
    private List<ChatViewBase> favouriteChats = new List<ChatViewBase>();
    private string searchString = "";
    private bool collapseNavMenu = true;
    private bool showSearch = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private async Task ToggleSearch()
    {
        showSearch = !showSearch;
        // if (showSearch)
        // {
        //     await JS.InvokeVoidAsync("focusElement", "searchChats");
        // }
    }

    private async Task HandleThreeDots()
    {
        ToggleNavMenu();
        if (OnClickCallback.HasDelegate)
        {
            await OnClickCallback.InvokeAsync(null);
        }

    }

    private async Task HandleImportMenu()
    {
        ToggleNavMenu();
        if (OnClickOpenImportCallback.HasDelegate)
        {
            await OnClickOpenImportCallback.InvokeAsync(null);
        }

    }


    private async Task RefreshChannels()
    {
        PreloadService.Show(SpinnerColor.Light, "Loading data...");
        allChats = await ts.getAllChats();
        await OnInitializedAsync();
        PreloadService.Hide();
    }


    public async Task goTo(string route)
    {
        uriHelper.NavigateTo(route, forceLoad: true, replace: false);
    }

    public async Task searchChat(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        searchString = e.Value?.ToString() ?? "";
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task setStar(long id)
    {
        await ts.AddFavouriteChannel(id);
        await OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task removeStar(long id)
    {
        await ts.RemoveFavouriteChannel(id);
        await OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }

    private bool isInFavourite(long id)
    {
        return GeneralConfigStatic.config.FavouriteChannels.Contains(id);
    }

    private async Task showPlayer()
    {
        await JS.InvokeVoidAsync("openAudioModal", "");
        ToggleNavMenu();
    }

    private void filterChats()
    {
        if (!string.IsNullOrEmpty(searchString))
        {
            sChats = allChats.Where(x => x.chat.Title.ToLower().Contains(searchString.ToLower())).ToList();
        }
        else
        {
            sChats = allChats.ToList();
        }
        filterMyChats(searchString);

    }

    protected override async Task OnInitializedAsync()
    {
        allChats = await ts.getAllSavedChats();
        filterChats();
        favouriteChats = (await ts.GetFouriteChannels(false)).Where(x => sChats.Select(x => x.chat.ID).ToList().Contains(x.chat.ID)).ToList();
        sharedChats = await db.getSharedInfoList(filter: searchString);
        StateHasChanged();
    }

    private void filterMyChats(string? searchString = null)
    {
        mineChats = new List<ChatViewBase>();
        foreach (var chat in allChats)
        {
            if (chat.chat is Channel chat1)
            {
                if (chat1.flags.HasFlag(Channel.Flags.creator))
                {
                    if (!string.IsNullOrEmpty(searchString))
                    {
                        if (chat1.Title.ToLower().Contains(searchString.ToLower()))
                        {
                            mineChats.Add(chat);
                        }
                    }
                    else
                    {
                        mineChats.Add(chat);
                    }

                }
            }
        }
    }
}
